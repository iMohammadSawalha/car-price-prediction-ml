import re
import math 
import datetime

from sklearn.preprocessing import OneHotEncoder

import pandas as pd
from scipy import stats


# Dependencies

arabic_numbers = '٠١٢٣٤٥٦٧٨٩'
english_numbers = '0123456789'
translate_arabic_numbers = str.maketrans(arabic_numbers, english_numbers)

def get_number_from_string(string):
   numbers = re.findall(r'\d+', string)
   total = sum(int(num) for num in numbers)
   return total

kilometers_per_liter = {
"بنزين":{
        "less":10.8,
        "more":7.7
},"ديزل":{
        "less":9.7,
        "more":5.6
}
}

amount_of_fuel_per_month = {
  "بنزين":{
        "less":159,
        "more":270
},"ديزل":{
        "less":389,
        "more":841
}  
}
regex_mapping = {
    "شرك":1,
    "صفر":0,
    "اول":1,
    "أول":1,
    "ثان":2,
    "تان":2,
    "ثال":3,
    "تال":3,
    "راب":4,
    "خام":5,
    "ساد":6,
    "ساب":7,
    "ثام":8,
    "تام":8,
    "تاس":9,
    "عاش":10,
    "مست":1,
    "غير":0,
    "مش":0,
    "نفس":1,
}

mean_kilometers_driven = 192151.4508096547
std_kilometers_driven = 186232.66769881285

optimal_lambda_kilometers_driven = 0.21896421711789488

# To be Used 
features_final_order = ['year',
 'palestinian_licence',
 'electric_windows',
 'engine_capacity',
 'installment_payment_method',
 'radio',
 'air_conditioner',
 'central_lock',
 'airbag',
 'alert_system',
 'leather_seats',
 'sunroof',
 'panoramic sunroof',
 'kilometers_driven_boxcox',
 'previous_owners_labels',
 'seats_labels',
 'Dodge',
 'أفيكو',
 'الفا',
 'اوبل',
 'اودي',
 'ايسوزو',
 'باص',
 'بي',
 'بيجو',
 'تويوتا',
 'جاجوار',
 'جي',
 'جييب',
 'داتشيا',
 'داف',
 'دايو',
 'دراجة',
 'ديهاتسو',
 'روفر',
 'رينو',
 'سانغ',
 'ستروين',
 'سكودا',
 'سوبارو',
 'سوزوكي',
 'سيت',
 'شاحنة',
 'شفروليه',
 'فورد',
 'فولفو',
 'فولكسفاجن',
 'فيات',
 'كيا',
 'لاندروفر',
 'مازدا',
 'مرسيدس',
 'ميتسوبيشي',
 'نيسان',
 'هوندا',
 'هونداي',
 'Model_',
 'Model_107',
 'Model_1117',
 'Model_127',
 'Model_150E25',
 'Model_1524',
 'Model_1624',
 'Model_170',
 'Model_180',
 'Model_190',
 'Model_200',
 'Model_2008',
 'Model_205',
 'Model_206',
 'Model_206+',
 'Model_207',
 'Model_208',
 'Model_212',
 'Model_220',
 'Model_230',
 'Model_240',
 'Model_250',
 'Model_260',
 'Model_280',
 'Model_3',
 'Model_300',
 'Model_3008',
 'Model_301',
 'Model_305',
 'Model_306',
 'Model_307',
 'Model_308',
 'Model_313',
 'Model_323',
 'Model_350',
 'Model_405',
 'Model_406',
 'Model_407',
 'Model_410',
 'Model_411',
 'Model_412',
 'Model_413',
 'Model_416',
 'Model_45',
 'Model_5',
 'Model_5008',
 'Model_508',
 'Model_50C13',
 'Model_518',
 'Model_519',
 'Model_55',
 'Model_6',
 'Model_607',
 'Model_614',
 'Model_65C18',
 'Model_711',
 'Model_80',
 'Model_814',
 'Model_87',
 'Model_88',
 'Model_914',
 'Model_A3',
 'Model_A4',
 'Model_A6',
 'Model_A8',
 'Model_A80',
 'Model_B2500',
 'Model_B3',
 'Model_B4',
 'Model_BT50',
 'Model_C',
 'Model_C-Elysee',
 'Model_C1',
 'Model_C180',
 'Model_C200',
 'Model_C220',
 'Model_C230',
 'Model_C250',
 'Model_C270',
 'Model_C3',
 'Model_C5',
 'Model_CC',
 'Model_CF85',
 'Model_CLA180',
 'Model_CR-V',
 'Model_Compas',
 'Model_Compass',
 'Model_DS3',
 'Model_Ds5',
 'Model_E200',
 'Model_E220',
 'Model_E230',
 'Model_E250',
 'Model_E270',
 'Model_E280',
 'Model_E300',
 'Model_E320',
 'Model_E350',
 'Model_FH',
 'Model_FL',
 'Model_FL6',
 'Model_FM',
 'Model_Fl6',
 'Model_GLA',
 'Model_GLA200',
 'Model_GTI',
 'Model_Golf',
 'Model_H1',
 'Model_H100',
 'Model_I30',
 'Model_I300',
 'Model_IVIECO',
 'Model_K3',
 'Model_K5',
 'Model_Kawasaki',
 'Model_L200',
 'Model_L400',
 'Model_LT',
 'Model_LV200',
 'Model_MPI',
 'Model_Massey',
 'Model_Patriot',
 'Model_Q5',
 'Model_Q7',
 'Model_R5',
 'Model_R9',
 'Model_Renegade',
 'Model_S320',
 'Model_S500',
 'Model_SL350',
 'Model_Slin',
 'Model_Spacetourer',
 'Model_TT',
 'Model_Tepee',
 'Model_Tsi',
 'Model_Vandora',
 'Model_Wrangler',
 'Model_XE',
 'Model_c',
 'Model_c15',
 'Model_c3',
 'Model_citigo',
 'Model_cx3',
 'Model_e270',
 'Model_i10',
 'Model_i20',
 'Model_i25',
 'Model_i30',
 'Model_i40',
 'Model_ix35',
 'Model_k3',
 'Model_s400',
 'Model_t-cross',
 'Model_t-roc',
 'Model_tucan',
 'Model_w210',
 'Model_أتيكا',
 'Model_أفيكو',
 'Model_أفيوو',
 'Model_ألتيما',
 'Model_أماروك',
 'Model_أوميغا',
 'Model_إنسيجنيا',
 'Model_ابيزا',
 'Model_اتراج',
 'Model_اتكو',
 'Model_اتكوا',
 'Model_اتوس',
 'Model_اتيكو',
 'Model_ارونا',
 'Model_استر',
 'Model_استرا',
 'Model_اسكانيا',
 'Model_اسكورت',
 'Model_اسكونا',
 'Model_افانتي',
 'Model_افيو',
 'Model_اكس',
 'Model_اكسبرت',
 'Model_اكسبرس',
 'Model_اكسنت',
 'Model_اكورد',
 'Model_الانترا',
 'Model_الميرا',
 'Model_ام',
 'Model_امبريزا',
 'Model_اوبترا',
 'Model_اوبتيما',
 'Model_اوت',
 'Model_اوتوبيانكي',
 'Model_اورايون',
 'Model_اوكتافيا',
 'Model_اونو',
 'Model_ايدج',
 'Model_ايونيك',
 'Model_باتريوت',
 'Model_باجيرو',
 'Model_بارتنر',
 'Model_باسات',
 'Model_باص',
 'Model_باندا',
 'Model_برايد',
 'Model_برلنجو',
 'Model_بورا',
 'Model_بوكسر',
 'Model_بولو',
 'Model_بونتباك',
 'Model_بونتو',
 'Model_بونتياك',
 'Model_بيرلينجو',
 'Model_بيكاسو',
 'Model_بيكانتو',
 'Model_تراجيت',
 'Model_ترافرس',
 'Model_ترانزيت',
 'Model_ترانسبورتر',
 'Model_تروبر',
 'Model_تعديل',
 'Model_تندر',
 'Model_توران',
 'Model_توسان',
 'Model_توكسون',
 'Model_توليدو',
 'Model_تيبو',
 'Model_تيجوان',
 'Model_تيدا',
 'Model_تيراكان',
 'Model_تيرانو',
 'Model_تيمبرا',
 'Model_تيندرا',
 'Model_جالانت',
 'Model_جامبي',
 'Model_جوالف',
 'Model_جوك',
 'Model_جولف',
 'Model_جيتا',
 'Model_جيتس',
 'Model_داستر',
 'Model_داف',
 'Model_دوبلو',
 'Model_دوكر',
 'Model_ديسكفري',
 'Model_ديفندر',
 'Model_ديلي',
 'Model_ديماكس',
 'Model_رابيد',
 'Model_راف',
 'Model_رايسر',
 'Model_رومستر',
 'Model_روميو',
 'Model_ريجاتا',
 'Model_رينج',
 'Model_رينو',
 'Model_ريو',
 'Model_زافيرا',
 'Model_سانتافيه',
 'Model_سبارك',
 'Model_سبرنتر',
 'Model_سبورتاج',
 'Model_سبيرو',
 'Model_سبيس',
 'Model_ستونك',
 'Model_ستيب',
 'Model_ستيشن',
 'Model_سكالا',
 'Model_سكانيا',
 'Model_سلندر',
 'Model_سنتافاي',
 'Model_سنتافيه',
 'Model_سنتانا',
 'Model_سوبر',
 'Model_سوبيرب',
 'Model_سورينتو',
 'Model_سول',
 'Model_سوناتا',
 'Model_سويفت',
 'Model_سيراتو',
 'Model_سيفيك',
 'Model_سييد',
 'Model_شبح',
 'Model_شيروكو',
 'Model_شيروكي',
 'Model_طوارق',
 'Model_عريض',
 'Model_غواصة',
 'Model_فابيا',
 'Model_فرينو',
 'Model_فلوانس',
 'Model_فورتي',
 'Model_فوكس',
 'Model_فولفو',
 'Model_فولكس',
 'Model_فيانو',
 'Model_فيتو',
 'Model_فيرنا',
 'Model_فيستا',
 'Model_فيكترا',
 'Model_فيلوستر',
 'Model_فيليسيا',
 'Model_فينيو',
 'Model_قرطبة',
 'Model_كابتر',
 'Model_كابتيفا',
 'Model_كادي',
 'Model_كاديت',
 'Model_كاروك',
 'Model_كاريزما',
 'Model_كافلير',
 'Model_كاميك',
 'Model_كانتر',
 'Model_كانجو',
 'Model_كبينة',
 'Model_كرافتر',
 'Model_كرافيل',
 'Model_كرايزلر',
 'Model_كرايسلر',
 'Model_كروز',
 'Model_كسارا',
 'Model_كشكاي',
 'Model_كليك',
 'Model_كليو',
 'Model_كوبرا',
 'Model_كوبيه',
 'Model_كوجا',
 'Model_كودياك',
 'Model_كورسا',
 'Model_كورولا',
 'Model_كومباس',
 'Model_كونا',
 'Model_كونيكت',
 'Model_كوووورسا',
 'Model_كيا',
 'Model_كيوبو',
 'Model_لانتس',
 'Model_لاند',
 'Model_لانسر',
 'Model_لانوس',
 'Model_لودجي',
 'Model_ليجاسي',
 'Model_ليجانزا',
 'Model_لينيا',
 'Model_ليون',
 'Model_ماتيز',
 'Model_ماجنتيس',
 'Model_ماجنوم',
 'Model_ماليبو',
 'Model_مان',
 'Model_مورننغ',
 'Model_موستانغ',
 'Model_موكا',
 'Model_مونديو',
 'Model_ميغان',
 'Model_ميكرا',
 'Model_نارية',
 'Model_نملة',
 'Model_نمله',
 'Model_نوبيرا',
 'Model_نوت',
 'Model_نيرو',
 'Model_نيو',
 'Model_همر',
 'Model_هيلاكس',
 'Model_وينر',
 'Model_يتي',
 'Model_يونغ',
 'Model_ڤيڤارو',
 'بنزين',
 'ديزل',
 'كهرباء',
 'هايبرد',
 'تأجير',
 'تجاري',
 'تدريب سياقة',
 'حكومي',
 'خصوصي',
 'عمومي',
 'اوتوماتيك',
 'عادي',
 'نصف اوتوماتيك'
 ]


features_columns_names = [
"brand",
"model",
"year",
"fuel_type",
"vehicle_history",
"licence",
"transmission_type",
"windows_type",
"engine_capacity",
"kilometers_driven",
"seats",
"payment_method",
"previous_owners",
"radio",
"air_conditioner",
"central_lock",
"airbag",
"alert_system",
"leather_seats",
"sunroof",
"panoramic sunroof",
"kilometers_driven_boxcox",
"previous_owners_ranges",
"previous_owners_labels",
"seats_ranges",
"seats_labels",
"Dodge",
"أفيكو",
"الفا",
"اوبل",
"اودي",
"ايسوزو",
"باص",
"بي",
"بيجو",
"تويوتا",
"جاجوار",
"جي",
"جييب",
"داتشيا",
"داف",
"دايو",
"دراجة",
"ديهاتسو",
"روفر",
"رينو",
"سانغ",
"ستروين",
"سكودا",
"سوبارو",
"سوزوكي",
"سيت",
"شاحنة",
"شفروليه",
"فورد",
"فولفو",
"فولكسفاجن",
"فيات",
"كيا",
"لاندروفر",
"مازدا",
"مرسيدس",
"ميتسوبيشي",
"نيسان",
"هوندا",
"هونداي",
"Model_",
"Model_107",
"Model_1117",
"Model_127",
"Model_150E25",
"Model_1524",
"Model_1624",
"Model_170",
"Model_180",
"Model_190",
"Model_200",
"Model_2008",
"Model_205",
"Model_206",
"Model_206+",
"Model_207",
"Model_208",
"Model_212",
"Model_220",
"Model_230",
"Model_240",
"Model_250",
"Model_260",
"Model_280",
"Model_3",
"Model_300",
"Model_3008",
"Model_301",
"Model_305",
"Model_306",
"Model_307",
"Model_308",
"Model_313",
"Model_323",
"Model_350",
"Model_405",
"Model_406",
"Model_407",
"Model_410",
"Model_411",
"Model_412",
"Model_413",
"Model_416",
"Model_45",
"Model_5",
"Model_5008",
"Model_508",
"Model_50C13",
"Model_518",
"Model_519",
"Model_55",
"Model_6",
"Model_607",
"Model_614",
"Model_65C18",
"Model_711",
"Model_80",
"Model_814",
"Model_87",
"Model_88",
"Model_914",
"Model_A3",
"Model_A4",
"Model_A6",
"Model_A8",
"Model_A80",
"Model_B2500",
"Model_B3",
"Model_B4",
"Model_BT50",
"Model_C",
"Model_C-Elysee",
"Model_C1",
"Model_C180",
"Model_C200",
"Model_C220",
"Model_C230",
"Model_C250",
"Model_C270",
"Model_C3",
"Model_C5",
"Model_CC",
"Model_CF85",
"Model_CLA180",
"Model_CR-V",
"Model_Compas",
"Model_Compass",
"Model_DS3",
"Model_Ds5",
"Model_E200",
"Model_E220",
"Model_E230",
"Model_E250",
"Model_E270",
"Model_E280",
"Model_E300",
"Model_E320",
"Model_E350",
"Model_FH",
"Model_FL",
"Model_FL6",
"Model_FM",
"Model_Fl6",
"Model_GLA",
"Model_GLA200",
"Model_GTI",
"Model_Golf",
"Model_H1",
"Model_H100",
"Model_I30",
"Model_I300",
"Model_IVIECO",
"Model_K3",
"Model_K5",
"Model_Kawasaki",
"Model_L200",
"Model_L400",
"Model_LT",
"Model_LV200",
"Model_MPI",
"Model_Massey",
"Model_Patriot",
"Model_Q5",
"Model_Q7",
"Model_R5",
"Model_R9",
"Model_Renegade",
"Model_S320",
"Model_S500",
"Model_SL350",
"Model_Slin",
"Model_Spacetourer",
"Model_TT",
"Model_Tepee",
"Model_Tsi",
"Model_Vandora",
"Model_Wrangler",
"Model_XE",
"Model_c",
"Model_c15",
"Model_c3",
"Model_citigo",
"Model_cx3",
"Model_e270",
"Model_i10",
"Model_i20",
"Model_i25",
"Model_i30",
"Model_i40",
"Model_ix35",
"Model_k3",
"Model_s400",
"Model_t-cross",
"Model_t-roc",
"Model_tucan",
"Model_w210",
"Model_أتيكا",
"Model_أفيكو",
"Model_أفيوو",
"Model_ألتيما",
"Model_أماروك",
"Model_أوميغا",
"Model_إنسيجنيا",
"Model_ابيزا",
"Model_اتراج",
"Model_اتكو",
"Model_اتكوا",
"Model_اتوس",
"Model_اتيكو",
"Model_ارونا",
"Model_استر",
"Model_استرا",
"Model_اسكانيا",
"Model_اسكورت",
"Model_اسكونا",
"Model_افانتي",
"Model_افيو",
"Model_اكس",
"Model_اكسبرت",
"Model_اكسبرس",
"Model_اكسنت",
"Model_اكورد",
"Model_الانترا",
"Model_الميرا",
"Model_ام",
"Model_امبريزا",
"Model_اوبترا",
"Model_اوبتيما",
"Model_اوت",
"Model_اوتوبيانكي",
"Model_اورايون",
"Model_اوكتافيا",
"Model_اونو",
"Model_ايدج",
"Model_ايونيك",
"Model_باتريوت",
"Model_باجيرو",
"Model_بارتنر",
"Model_باسات",
"Model_باص",
"Model_باندا",
"Model_برايد",
"Model_برلنجو",
"Model_بورا",
"Model_بوكسر",
"Model_بولو",
"Model_بونتباك",
"Model_بونتو",
"Model_بونتياك",
"Model_بيرلينجو",
"Model_بيكاسو",
"Model_بيكانتو",
"Model_تراجيت",
"Model_ترافرس",
"Model_ترانزيت",
"Model_ترانسبورتر",
"Model_تروبر",
"Model_تعديل",
"Model_تندر",
"Model_توران",
"Model_توسان",
"Model_توكسون",
"Model_توليدو",
"Model_تيبو",
"Model_تيجوان",
"Model_تيدا",
"Model_تيراكان",
"Model_تيرانو",
"Model_تيمبرا",
"Model_تيندرا",
"Model_جالانت",
"Model_جامبي",
"Model_جوالف",
"Model_جوك",
"Model_جولف",
"Model_جيتا",
"Model_جيتس",
"Model_داستر",
"Model_داف",
"Model_دوبلو",
"Model_دوكر",
"Model_ديسكفري",
"Model_ديفندر",
"Model_ديلي",
"Model_ديماكس",
"Model_رابيد",
"Model_راف",
"Model_رايسر",
"Model_رومستر",
"Model_روميو",
"Model_ريجاتا",
"Model_رينج",
"Model_رينو",
"Model_ريو",
"Model_زافيرا",
"Model_سانتافيه",
"Model_سبارك",
"Model_سبرنتر",
"Model_سبورتاج",
"Model_سبيرو",
"Model_سبيس",
"Model_ستونك",
"Model_ستيب",
"Model_ستيشن",
"Model_سكالا",
"Model_سكانيا",
"Model_سلندر",
"Model_سنتافاي",
"Model_سنتافيه",
"Model_سنتانا",
"Model_سوبر",
"Model_سوبيرب",
"Model_سورينتو",
"Model_سول",
"Model_سوناتا",
"Model_سويفت",
"Model_سيراتو",
"Model_سيفيك",
"Model_سييد",
"Model_شبح",
"Model_شيروكو",
"Model_شيروكي",
"Model_طوارق",
"Model_عريض",
"Model_غواصة",
"Model_فابيا",
"Model_فرينو",
"Model_فلوانس",
"Model_فورتي",
"Model_فوكس",
"Model_فولفو",
"Model_فولكس",
"Model_فيانو",
"Model_فيتو",
"Model_فيرنا",
"Model_فيستا",
"Model_فيكترا",
"Model_فيلوستر",
"Model_فيليسيا",
"Model_فينيو",
"Model_قرطبة",
"Model_كابتر",
"Model_كابتيفا",
"Model_كادي",
"Model_كاديت",
"Model_كاروك",
"Model_كاريزما",
"Model_كافلير",
"Model_كاميك",
"Model_كانتر",
"Model_كانجو",
"Model_كبينة",
"Model_كرافتر",
"Model_كرافيل",
"Model_كرايزلر",
"Model_كرايسلر",
"Model_كروز",
"Model_كسارا",
"Model_كشكاي",
"Model_كليك",
"Model_كليو",
"Model_كوبرا",
"Model_كوبيه",
"Model_كوجا",
"Model_كودياك",
"Model_كورسا",
"Model_كورولا",
"Model_كومباس",
"Model_كونا",
"Model_كونيكت",
"Model_كوووورسا",
"Model_كيا",
"Model_كيوبو",
"Model_لانتس",
"Model_لاند",
"Model_لانسر",
"Model_لانوس",
"Model_لودجي",
"Model_ليجاسي",
"Model_ليجانزا",
"Model_لينيا",
"Model_ليون",
"Model_ماتيز",
"Model_ماجنتيس",
"Model_ماجنوم",
"Model_ماليبو",
"Model_مان",
"Model_مورننغ",
"Model_موستانغ",
"Model_موكا",
"Model_مونديو",
"Model_ميغان",
"Model_ميكرا",
"Model_نارية",
"Model_نملة",
"Model_نمله",
"Model_نوبيرا",
"Model_نوت",
"Model_نيرو",
"Model_نيو",
"Model_همر",
"Model_هيلاكس",
"Model_وينر",
"Model_يتي",
"Model_يونغ",
"Model_ڤيڤارو",
"بنزين",
"ديزل",
"كهرباء",
"هايبرد",
"تأجير",
"تجاري",
"تدريب سياقة",
"حكومي",
"خصوصي",
"عمومي",
"اوتوماتيك",
"عادي",
"نصف اوتوماتيك"
]







additions_features = ['مسجل','مُكيّف','مركزي','إغلاق','مغنيسيوم','هوائية','وسادة','جنطات','جهاز','إنذار','جلد','فرش','سقف','فتحة']

compound_words_additions_features = {
    'إغلاق مركزي':['إغلاق','مركزي'],
    'جنطات مغنيسيوم':['جنطات','مغنيسيوم'],
    'وسادة هوائية':['وسادة','هوائية'],
    'جهاز إنذار':['جهاز','إنذار'],
    'فرش جلد':['فرش','جلد'],
    'فتحة سقف':['فتحة','سقف']
}

def extract_num_seats(value):
    if get_number_from_string(str(value).translate(translate_arabic_numbers)):
        return get_number_from_string(str(value).translate(translate_arabic_numbers))
    return 5

def convert_car_meter(value):

    number = re.findall(r'\d+', str(value))

    if(not number):
        return None
    number = number[0]
    
    if (float(number) / 1000) >=1:
        return int(number)
    
    return int(number)*1000

today = datetime.date.today()
year = today.year
fuel_keys = ["بنزين","ديزل"]

def estimate_car_meter(df):
   for index, row in df.iterrows():
      if math.isnan(row["عداد السيارة"]) or row["عداد السيارة"] == 0:
         new_value = int()
         cc = int()
         if row["قوة الماتور"] > 2500:
               cc = "more"
         else:
               cc = "less"
         if not row["نوع الوقود"].strip() in fuel_keys:
               new_value = int((year - row["سنة"])*12*1500)
         else:
               Kvalue = kilometers_per_liter[row["نوع الوقود"].strip()][cc]
               Fvalue = amount_of_fuel_per_month[row["نوع الوقود"].strip()][cc]
               denominator = int(row["سنة"]/995)
               new_value = int(((year - row["سنة"])*12*Fvalue*Kvalue)/denominator)
         df.at[index, "عداد السيارة"] = new_value

# def convert_previous_owners_to_num(df,label_name):
#     for index, row in df.iterrows():
#         new_value = None
#         text = row[label_name]
#         string = str(text).translate(translate_arabic_numbers)
#         for key,value in regex_mapping.items():
#             match = re.search(key,string)
#             if(match):
#                 new_value = value
#                 continue
#         if get_number_from_string(string) > 0:   
#             new_value = get_number_from_string(string)
#         else:
#              new_value = int((year - row["year"])/10)
#         df.at[index, label_name] = new_value

def convert_previous_owners_to_num(value):
    new_value = None
    string = str(value).translate(translate_arabic_numbers)
    for key,value in regex_mapping.items():
        match = re.search(key,string)
        if(match):
            new_value = value
            continue
    if get_number_from_string(string) > 0:   
        new_value = get_number_from_string(string)
    return new_value

columns_names_arabic_english = {
    "سعر":"Price",
    "شركة":"Brand",
    "موديل":"Model",
    "سنة":"Year",
    "لون السيارة":"Color",
    "نوع الوقود":"Fuel_Type",
    "أصل السيارة":"Vehicle_History",
    "رخصة السيارة":"Licence",
    "نوع الجير":"Transmission_Type",
    "الزجاج":"Windows_Type",
    "قوة الماتور":"Engine_Capacity",
    "عداد السيارة":"Kilometers_Driven",
    "عدد الركاب":"Seats",
    "وسيلة الدفع":"Payment_Method",
    "معروضة":"Listed_For",
    "أصحاب سابقون":"Previous_Owners",
    "مسجل":"Radio",
    "CD":"CD",
    "مُكيّف":"Air_Conditioner",
    "إغلاق مركزي":"Central_Lock",
    "وسادة هوائية":"Airbag",
    "جنطات مغنيسيوم":"Magnesium_Rims",
    "جهاز إنذار":"Alert_System",
    "فرش جلد":"Leather_Seats",
    "فتحة سقف":"Sunroof"
}

licence_map = {
    "فلسطينية": 1,
    "نمرة صفراء": 0
}

windows_type_map = {
    "الكتروني": 1,
    "يدوي": 0
}

payment_method_map = {
    "نقدا فقط": 0,
    "إمكانية التقسيط": 1
}

columns_rename_map = {
    "Licence":"Palestinian_Licence",
    "Windows_Type":"Electric_Windows",
    "Payment_Method":"Installment_Payment_Method"
}

def convert_kilometers_driven_to_zscore(value):
    return ((value - mean_kilometers_driven)/std_kilometers_driven)

def convert_kilometers_driven_boxcox(value):
    return stats.boxcox(value, lmbda=optimal_lambda_kilometers_driven)

def bin_previous_owners(df):
   return pd.cut(df, bins=[-1, 2, 4, 100], labels=[1, 2, 3])

def bin_seats(df):
    return pd.cut(df, bins=[-1, 1, 3,6,8,100], labels=[1, 2, 3, 4, 5])

def one_hot_enconde_df(df,feature_label,new_features_labels):
    model_onehot = OneHotEncoder()
    
    model_feature_arr = model_onehot.fit_transform(df[[feature_label]]).toarray()

    model_onehot_features = pd.DataFrame(model_feature_arr, columns=new_features_labels)

    return pd.concat([df[df.columns],model_onehot_features],axis=1)
